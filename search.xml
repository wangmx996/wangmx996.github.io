<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试七牛云图床</title>
      <link href="/2020/10/03/%E6%88%91%E7%9A%84%E7%AC%ACer%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/10/03/%E6%88%91%E7%9A%84%E7%AC%ACer%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p>这是我第一篇博客</p><img src="http://image.wangmx.cn/images/872.jpg">]]></content>
      
      
      <categories>
          
          <category> Spring - SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（二）Docker介绍</title>
      <link href="/2020/06/14/Docker%E5%85%A5%E9%97%A8%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89Docker%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/06/14/Docker%E5%85%A5%E9%97%A8%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89Docker%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><h2 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h2><blockquote><p>Docker is a platform for developers and sysadmins to build, run, and share applications with containers. The use of containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</p></blockquote><p>上面是<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">Docker官方文档</a>中给出的定义，翻译之后就是：<br>Docker是一个供开发人员和系统管理员使用容器构建、运行和共享应用程序的平台。使用容器部署应用程序称为容器化。容器并不新鲜，但它们用于轻松部署应用程序却很新鲜。</p><p>因此，要了解docker是什么，首先我们要理解<strong>容器</strong>的概念，而理解容器，我们还要了解<strong>容器</strong>和<strong>虚拟机</strong>的区别</p><h2 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h2><p>上文中我们介绍了虚拟化技术，了解了虚拟化架构之后，我们就可以很清楚的区分<strong>容器</strong>和<strong>虚拟机</strong>的概念<br>我们用的传统虚拟机如 VMware ， VisualBox 之类的是全虚拟化架构，需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。</p><p>而容器技术是基于操作系统层的虚拟化技术，容器和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。</p><p>容器技术是实现操作系统虚拟化的一种途径，可以让您在资源受到隔离的进程中运行应用程序及其依赖关系。通过使用容器，我们可以轻松打包应用程序的代码、配置和依赖关系，将其变成容易使用的构建块，从而实现环境一致性、运营效率、开发人员生产力和版本控制等诸多目标。容器可以帮助保证应用程序快速、可靠、一致地部署，其间不受部署环境的影响。容器还赋予我们对资源更多的精细化控制能力，让我们的基础设施效率更高。通过下面这幅图我们可以很直观的反映出这两者的区别所在<br><img src="https://img-blog.csdnimg.cn/20200307215606288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>容器的优点：</p><ul><li><p><strong>灵活</strong>:即使是最复杂的应用程序也可以被封装。</p></li><li><p><strong>轻量级</strong>:容器利用和共享主机内核，使它们在系统资源方面比虚拟机更高效。</p></li><li><p><strong>可移植性</strong>:您可以在本地构建、部署到云，并在任何地方运行。</p></li><li><p><strong>松散耦合</strong>:容器是高度自给自足和封装的，允许您替换或升级一个容器而不破坏其他容器。</p></li><li><p><strong>可伸缩</strong>:您可以增加并自动跨数据中心分发容器副本。</p></li><li><p><strong>安全</strong>:容器对进程应用主动约束和隔离，而不需要用户进行任何配置。</p></li></ul><p>我们可以从下面这张表格很清楚地看到容器相比于传统虚拟机的特性的优势所在：<br>|特性  |容器  | 虚拟机|<br>|–|–|–|<br>|启动|    秒级    |分钟级|<br>|硬盘使用    |一般为MB|    一般为GB|<br>|性能|    接近原生|    弱于|<br>|系统支持量|    单机支持上千个容器|    一般是几十个|</p><h2 id="Docker定位"><a href="#Docker定位" class="headerlink" title="Docker定位"></a>Docker定位</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离，相当于是在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。<br>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker ，就不用担心环境问题。<br>总体来说， Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>Docker相比于传统虚拟化方式具有更多的优势：</p><ul><li>docker 启动快速属于秒级别。虚拟机通常需要几分钟去启动</li><li>docker 需要的资源更少， docker 在操作系统级别进行虚拟化， docker 容器和内核交互，几乎没有性能损耗，性能优于通过 Hypervisor 层与内核层的虚拟化</li><li>docker 更轻量， docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，  Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高<br>与虚拟机相比， docker 隔离性更弱， docker 属于进程之间的隔离，虚拟机可实现系统级别隔离</li><li>安全性： docker 的安全性也更弱。 Docker 的租户 root 和宿主机 root 等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户 root 权限和宿主机的 root 虚拟机权限是分离的，并且虚拟机利用如 Intel 的 VT-d 和 VT-x 的 ring-1 硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击</li><li>可管理性： docker 的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如 VMware vCenter 提供完备的虚拟机管理能力</li><li>高可用和可恢复性： docker 对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制， VMware 可承诺虚拟机 99.999% 高可用，保证业务连续性</li><li>快速创建、删除：虚拟化创建是分钟级别的， Docker 容器创建是秒级别的， Docker 的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间<br>交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化。 Docker 在 Dockerfile 中记录了容器构建过程，可在集群中实现快速分发和快速部署</li></ul><h2 id="Docker三要素"><a href="#Docker三要素" class="headerlink" title="Docker三要素"></a>Docker三要素</h2><p><img src="https://img-blog.csdnimg.cn/2020030822421362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上图我们可以看到，Docker 中包括三个基本的要素：</p><ol><li>Repository(仓库)</li><li>Image(镜像)</li><li>Container(容器)</li></ol><h3 id="Repository（仓库）"><a href="#Repository（仓库）" class="headerlink" title="Repository（仓库）"></a>Repository（仓库）</h3><p>仓库的概念很好理解，Docker 仓库是集中存放镜像文件的场所。如果使用了git和github就很容易理解docker的仓库概念。docker仓库概念和git类似。</p><p>docker提供了一个注册服务器（register）来保存多个仓库，每个仓库又可以包含多个具备不同tag的镜像，</p><p>docker运作中使用的默认仓库是<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a>公共仓库。</p><p>仓库支持的操作类似git，当用户创建了自己的镜像之后就可以使用push命令将它上传到共有或者私有的仓库。这样下次再另外一台机器上使用这个镜像的时候只需要从仓库里面pull下来就可以了。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><h3 id="Image-镜像-和Container-容器"><a href="#Image-镜像-和Container-容器" class="headerlink" title="Image(镜像)和Container(容器)"></a>Image(镜像)和Container(容器)</h3><p><img src="https://img-blog.csdnimg.cn/20200308223245737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Fundamentally, a container is nothing but a running process, with some added encapsulation features applied to it in order to keep it isolated from the host and from other containers. One of the most important aspects of container isolation is that each container interacts with its own private filesystem; this filesystem is provided by a Docker image. An image includes everything needed to run an application - the code or binary, runtimes, dependencies, and any other filesystem objects required.<br>容器只是一个正在运行的进程，为了使它与主机和其他容器隔离，在其上应用了一些附加的封装特性。容器隔离最重要的方面之一是每个容器都与自己的私有文件系统进行交互;此文件系统由Docker镜像提供。镜像包含运行应用程序所需的所有东西——代码或二进制文件、运行时、依赖项以及所需的任何其他文件系统对象。</p></blockquote><p>镜像是文件, 容器是进程。 容器是基于镜像创建的, 即容器中的进程依赖于镜像中的文件, 这里的文件包括进程运行所需要的可执行文件， 依赖软件， 库文件， 配置文件等等…<br>相对于镜像来说容器是动态的，容器的定义和镜像几乎一样，唯一的区别是容器在启动的时候创建了一层可写层次作为最上层。（   docker create &lt;image -id &gt; ：为指定的镜像添加一个可读写层，构成一个新的容器；）<br>==注：容器是由镜像实例化而来，这和我们学习的面向对象的概念十分相似，我们可以把镜像看作类，把容器看作类实例化后的对象。==<br>docker 的镜像概念类似虚拟机的镜像。是一个只读的模板，一个独立的文件系统，带有创建Docker容器的指令，可以用来创建新的容器。（  docker create &lt;image -id &gt; ：为指定的镜像添加一个可读写层，构成一个新的容器；）例如：一个镜像可以包含一个完整的ubuntu操作系统环境，里面仅安装了mysql或用户需要的其他应用程序。<br>docker镜像实际上是由一层一层的系统文件组成，这种层级的文件系统被称为UnionFS( Union file system  统一文件系统)，镜像可以基于dockerfile构建，dockerfile是一个描述文件，里面包含了若干条密令，每条命令都会对基础文件系统创建新的层次结构。</p><p>docker提供了一个很简单的机制来创建镜像或更新现有的镜像。用户甚至可以从其他人那里下载一个已经做好的镜像直接使用。（镜像是只读的，可以理解为静态文件）</p><p>docker利用容器来运行应用：docker容器是由docker镜像创建的运行实例。docker容器类似虚拟机，可以执行包含启动，停止，删除等。每个容器间是相互隔离的。容器中会运行特定的运用，包含特定应用的代码及所需的依赖文件。==可以把容器看作一个简易版的linux环境（包含root用户权限，进程空间，用户空间和网络空间等）和运行在其中的应用程序==。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/12/hello-world/"/>
      <url>/2020/06/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的hexo-theme-matery主题搭建博客并优化</title>
      <link href="/2019/10/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h2><p>这是我第一篇博客</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
